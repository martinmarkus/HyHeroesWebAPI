using HyHeroesWebAPI.ApplicationCore.Entities;
using HyHeroesWebAPI.Infrastructure.Infrastructure.Extensions;
using HyHeroesWebAPI.Presentation.DTOs;
using HyHeroesWebAPI.Presentation.Mapper.Interfaces;

namespace HyHeroesWebAPI.Presentation.Mapper
{
    public class PayPalMapper : IPayPalMapper
    {
        public PayPalIPNMessage MapToIPNMessage(
            string mc_gross,
            string protection_eligibility,
            string address_status,
            string payer_id,
            string tax,
            string address_street,
            string payment_date,
            string payment_status,
            string charset,
            string address_zip,
            string first_name,
            string mc_fee,
            string address_country_code,
            string address_name,
            string notify_version,
            string custom,
            string payer_status,
            string address_country,
            string address_city,
            string quantity,
            string verify_sign,
            string payer_email,
            string txn_id,
            string payment_type,
            string last_name,
            string address_state,
            string receiver_email,
            string payment_fee,
            string receiver_id,
            string item_name,
            string mc_currency,
            string item_number,
            string residence_country,
            string test_ipn,
            string handling_amount,
            string transaction_subject,
            string payment_gross,
            string shipping) =>
            new PayPalIPNMessage()
            {
                //McGross = mc_gross.GetAsDecimal(),
                ProtectionEligibility = protection_eligibility,
                AddressStatus = address_status,
                PayerId = payer_id,
                //Tax = tax.GetAsDecimal(),
                AddressStreet = address_street,
                //PaymentDate = payment_date.GetAsDateTime(),
                PaymentStatus = payment_status,
                Charset = charset,
                AddressZip = address_zip,
                FirstName = first_name,
                //McFee = mc_fee.GetAsDecimal(),
                AddressCountryCode = address_country_code,
                AddressName = address_name,
                NotifyVersion = notify_version,
                Custom = custom,
                PayerStatus = payer_status,
                AddressCountry = address_country,
                AddressCity = address_city,
                //Quantity = quantity.GetAsInt32(),
                VerifySign = verify_sign,
                PayerEmail = payer_email,
                TxnId = txn_id,
                PaymentType = payment_type,
                LastName = last_name,
                AddressState = address_state,
                ReceiverEmail = receiver_email,
                //PaymentFee = payment_fee.GetAsDecimal(),
                ReceiverId = receiver_id,
                ItemName = item_name,
                //McCurrency = mc_currency.GetAsDecimal(),
                ItemNumber = item_number,
                ResidenceCountry = residence_country,
                TestIpn = test_ipn,
                HandlingAmount = handling_amount,
                TransactionSubject = transaction_subject,
                //PaymentGross = payment_gross.GetAsDecimal(),
                Shipping = shipping
            };

        public PayPalIPNMessage MapToIPNMessage(PayPalIPNMessageDTO dto) =>
            new PayPalIPNMessage()
            {
                //McGross = mc_gross.GetAsDecimal(),
                ProtectionEligibility = dto.ProtectionEligibility,
                    AddressStatus = dto.AddressStatus,
                    PayerId = dto.PayerId,
                    //Tax = tax.GetAsDecimal(),
                    AddressStreet = dto.AddressStreet,
                    //PaymentDate = payment_date.GetAsDateTime(),
                    PaymentStatus = dto.PayerStatus,
                    Charset = dto.Charset,
                    AddressZip = dto.AddressZip,
                    FirstName = dto.FirstName,
                    //McFee = mc_fee.GetAsDecimal(),
                    AddressCountryCode = dto.AddressCountryCode,
                    AddressName = dto.AddressName,
                    NotifyVersion = dto.NotifyVersion,
                    Custom = dto.Custom,
                    PayerStatus = dto.PayerStatus,
                    AddressCountry = dto.AddressCountry,
                    AddressCity = dto.AddressCity,
                    //Quantity = quantity.GetAsInt32(),
                    VerifySign = dto.VerifySign,
                    PayerEmail = dto.PayerEmail,
                    TxnId = dto.TxnId,
                    PaymentType = dto.PaymentType,
                    LastName = dto.LastName,
                    AddressState = dto.AddressState,
                    ReceiverEmail = dto.ReceiverEmail,
                    //PaymentFee = payment_fee.GetAsDecimal(),
                    ReceiverId = dto.ReceiverId,
                    ItemName = dto.ItemName,
                    //McCurrency = mc_currency.GetAsDecimal(),
                    ItemNumber = dto.ItemNumber,
                    ResidenceCountry = dto.ResidenceCountry,
                    TestIpn = dto.TestIpn,
                    HandlingAmount = dto.HandlingAmount,
                    TransactionSubject = dto.TransactionSubject,
                    //PaymentGross = payment_gross.GetAsDecimal(),
                    Shipping = dto.Shipping
                };
    }
}
