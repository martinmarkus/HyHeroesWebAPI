// <auto-generated />
using System;
using HyHeroesWebAPI.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HyHeroesWebAPI.Presentation.Migrations
{
    [DbContext(typeof(HyHeroesDbContext))]
    [Migration("20210117114414_client-identity")]
    partial class clientidentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ActualValueOfOneKredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("ActualValueOfOneKredit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4face441-0e5d-4c11-a98c-0e4ec3d2c22a"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 944, DateTimeKind.Local).AddTicks(7578),
                            IsActive = true,
                            Value = 2m
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAdoszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAzonosito")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoMegjegyzes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoSendEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelefonszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BillingTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BaseValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ValidatorHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ValidatorSalt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientIdentities");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGeneratedByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("KreditPurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("SenderPhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("KreditPurchaseId");

                    b.ToTable("EDSMSActivationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GrossPrice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsTest")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("JatekFizetesId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Prefix")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverPhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("EDSMSPurchases");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailToVerify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillingTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FailDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("BillingTransactionId");

                    b.ToTable("FailedTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsServerRunning")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ServerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("GameServers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("578f543a-db8f-4da6-af24-5f3cb8887146"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 940, DateTimeKind.Local).AddTicks(6906),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "GTA"
                        },
                        new
                        {
                            Id = new Guid("04514ee7-5d91-40fe-8827-0219bd1f69cc"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 943, DateTimeKind.Local).AddTicks(5609),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Survival"
                        },
                        new
                        {
                            Id = new Guid("476cae6f-f50f-468e-87e7-c4a1762dbc8a"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 943, DateTimeKind.Local).AddTicks(5671),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Skyblock"
                        },
                        new
                        {
                            Id = new Guid("02b4d34d-f815-4038-9558-5fea8649585b"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 943, DateTimeKind.Local).AddTicks(5677),
                            IsActive = true,
                            IsServerRunning = false,
                            ServerName = "RPG"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KreditPurchases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68b70558-f363-49ff-8962-05f147ea93db"),
                            CreationDate = new DateTime(2020, 9, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(406),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("7d5f2db2-3551-4e94-9ead-272d371ed107"),
                            CreationDate = new DateTime(2020, 9, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(510),
                            CurrencyValue = 5000,
                            IsActive = true,
                            KreditValue = 2500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("023024e8-bdc5-4dc1-b49e-550230b89caf"),
                            CreationDate = new DateTime(2020, 10, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(568),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("59ae9026-f346-4a47-b49b-81842ab33e78"),
                            CreationDate = new DateTime(2020, 10, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(577),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("0dac1e95-cbf7-43a6-8ea4-1102704124ea"),
                            CreationDate = new DateTime(2020, 11, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(586),
                            CurrencyValue = 6000,
                            IsActive = true,
                            KreditValue = 3000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("c266e69a-bf6c-48d8-82b5-1d3a1198c942"),
                            CreationDate = new DateTime(2020, 12, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(599),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("49a0976c-a716-441e-a1e3-d7c9a36c3d19"),
                            CreationDate = new DateTime(2020, 9, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(607),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("38b0916e-310c-42ce-8136-3b8da0e69ae8"),
                            CreationDate = new DateTime(2020, 9, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(615),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("32a115b8-34e7-423f-9f33-6ec8c5e32758"),
                            CreationDate = new DateTime(2020, 10, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(623),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 2032,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("da202998-1b98-4c35-879c-58847a661dda"),
                            CreationDate = new DateTime(2020, 10, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(630),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("b156c289-1cba-4bd1-a553-7d2f59ab7743"),
                            CreationDate = new DateTime(2020, 10, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(639),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("fe1bae7f-3724-44c7-9579-d999a835a346"),
                            CreationDate = new DateTime(2020, 11, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(649),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("6373ff5c-86e7-4c71-a0fd-194d0ee75b51"),
                            CreationDate = new DateTime(2020, 11, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(658),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("2d0c4e7a-63c3-413e-804d-8686f5c6f68d"),
                            CreationDate = new DateTime(2020, 12, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(669),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("83e2135a-6a57-403e-9865-0b85a5e6d391"),
                            CreationDate = new DateTime(2020, 12, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(676),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("3eeeef26-f053-4975-8f39-a1212a592be1"),
                            CreationDate = new DateTime(2020, 9, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(685),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("6abed97a-25da-4e74-8a53-9e02257ef996"),
                            CreationDate = new DateTime(2020, 10, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(696),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("e9cc06d9-dd4b-4818-b2ed-d9f392999c37"),
                            CreationDate = new DateTime(2020, 10, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(705),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("910586d0-2980-44fe-ab90-528cf47de065"),
                            CreationDate = new DateTime(2020, 11, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(712),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("a13a5de1-e873-4dc6-a6e2-94f8e35f01d3"),
                            CreationDate = new DateTime(2020, 11, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(721),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("e96b1df5-b8e7-401d-b6e9-c938cc92285d"),
                            CreationDate = new DateTime(2020, 11, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(728),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("8171bca7-b9a4-4ccc-87b1-8939d2f8394a"),
                            CreationDate = new DateTime(2020, 11, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(738),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("28f3a2c6-305a-40e5-8ae6-ebdc1fd86488"),
                            CreationDate = new DateTime(2020, 12, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(747),
                            CurrencyValue = 4000,
                            IsActive = true,
                            KreditValue = 2000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("e23a525b-b56e-4d96-983e-e4ff4f9d836d"),
                            CreationDate = new DateTime(2020, 12, 17, 12, 44, 13, 947, DateTimeKind.Local).AddTicks(756),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MassKreditActivationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MassKreditActivationCodeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MassKreditActivationCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("MassKreditUserActivations");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormattedNews")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Preview")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PublisherUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PublisherUserId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5c9692b-8728-4cba-8bcb-a82c6264ebd2"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 40, 53, 946, DateTimeKind.Local).AddTicks(7220),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #1"
                        },
                        new
                        {
                            Id = new Guid("4703511a-26e9-4f54-9dae-9957402294b3"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 41, 43, 946, DateTimeKind.Local).AddTicks(7801),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #2"
                        },
                        new
                        {
                            Id = new Guid("c137b9c5-6a1a-4a4a-a888-3299982380e5"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 42, 33, 946, DateTimeKind.Local).AddTicks(7824),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #3"
                        },
                        new
                        {
                            Id = new Guid("00cecabf-a067-46d0-b8a8-00af0f468a47"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 43, 23, 946, DateTimeKind.Local).AddTicks(7832),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #4"
                        },
                        new
                        {
                            Id = new Guid("5aa2fba3-fb45-413c-81d0-b64e7da6e7f0"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(7840),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #5"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OnlinePlayerCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.ToTable("OnlinePlayerStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Code")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cab0ae6e-0a89-4dbf-8dbd-f41a134d2d19"),
                            Code = new Guid("af0d1549-ccb7-4557-a9de-626434917b32"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(3718),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("d41cfac6-e63a-4862-a246-4025d2fe58a5"),
                            Code = new Guid("ba88c9ca-0a5c-4ae7-becc-a85559de0404"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(4760),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalIPNMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressState")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressZip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Charset")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HandlingAmount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("McCurrency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("McFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("McGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NotifyVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PaymentFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProtectionEligibility")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResidenceCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Shipping")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TestIpn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TxnId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VerifySign")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PayPalIPNMessages");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequestProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RequesterUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterUserId");

                    b.ToTable("PayPalTransactionRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameActivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameDeactivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OneTimeCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermanentPrice")
                        .HasColumnType("int");

                    b.Property<int>("PricePerMonth")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15284377-be3f-4904-8a02-574411020461"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(8371),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "VIP rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 2000,
                            PricePerMonth = 1000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("ba1d9539-86a6-4815-af15-e552aaa4ac1c"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(2855),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Bajnok rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 6000,
                            PricePerMonth = 3000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("003064cf-6e22-4223-ad0e-2236f37221f5"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(2955),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Elit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 10000,
                            PricePerMonth = 5000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("1943474e-fa90-4176-bb10-94d27b7422a6"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(2964),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "SzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 14000,
                            PricePerMonth = 8000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("d1302b12-e5ce-4d63-86d3-b36932a79b70"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(2976),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "HiperSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 16000,
                            PricePerMonth = 10000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("0c6d97cc-5f6f-404a-b058-38818e8ef8a6"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 946, DateTimeKind.Local).AddTicks(2982),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "ExtraSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 20000,
                            PricePerMonth = 16000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0"),
                            CategoryName = "Rangok",
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(6794),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 1
                        },
                        new
                        {
                            Id = new Guid("5d32fedf-28f9-4bc9-9899-4bacbbe9ea28"),
                            CategoryName = "Egyéb",
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(7698),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActivationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExpirationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PurchasedProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.HasIndex("PurchasedProductId");

                    b.ToTable("PurchaseStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOverwrittenByOtherRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditSpentOn")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ValidityPeriodInMonths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasedProducts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 944, DateTimeKind.Local).AddTicks(9005),
                            IsActive = true,
                            Name = "User",
                            PermissionLevel = 1
                        },
                        new
                        {
                            Id = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(606),
                            IsActive = true,
                            Name = "Admin",
                            PermissionLevel = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HyCoin")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAuthenticationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastAuthenticationIp")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5de99496-dbbd-4ce5-9445-6d453b46d145"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(1415),
                            Currency = 1000000,
                            Email = "martinmarkus0@gmail.com",
                            HyCoin = 10000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(3146),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(4059),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic"
                        },
                        new
                        {
                            Id = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(5996),
                            Currency = 50000,
                            Email = "birdemic2@gmail.com",
                            HyCoin = 4000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(6054),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(6071),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic2"
                        },
                        new
                        {
                            Id = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698"),
                            CreationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(6106),
                            Currency = 40000,
                            Email = "hatoska@gmail.com",
                            HyCoin = 3000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(6112),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 1, 17, 12, 44, 13, 945, DateTimeKind.Local).AddTicks(6115),
                            RoleId = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            UserName = "hatoska"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSActivationCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", "KreditPurchase")
                        .WithMany()
                        .HasForeignKey("KreditPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", "BillingTransaction")
                        .WithMany()
                        .HasForeignKey("BillingTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", "MassKreditActivationCode")
                        .WithMany("MassKreditUserActivations")
                        .HasForeignKey("MassKreditActivationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "PublisherUser")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("OnlinePlayerStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("PasswordResetCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", "PurchasedProduct")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("PurchasedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Product", "Product")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
