// <auto-generated />
using System;
using HyHeroesWebAPI.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HyHeroesWebAPI.Presentation.Migrations
{
    [DbContext(typeof(HyHeroesDbContext))]
    [Migration("20210215213013_Billingo2")]
    partial class Billingo2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ActualValueOfOneKredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("ActualValueOfOneKredit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("063c08ea-d64f-46a8-88db-92857cce011e"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 745, DateTimeKind.Local).AddTicks(3947),
                            IsActive = true,
                            Value = 2m
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BillingName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransferCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankTransfers");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransferBillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BankTransferId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Region")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BankTransferId")
                        .IsUnique();

                    b.ToTable("BankTransferBillingAddresses");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarionTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Region")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BarionTransactionId")
                        .IsUnique();

                    b.ToTable("BarionBillingAddresses");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BillingName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GatewayURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("KreditAmount")
                        .HasColumnType("double");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BarionTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAdoszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAzonosito")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoMegjegyzes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoSendEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelefonszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BillingTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoBillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HouseNrc")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StreetType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BillingoBillingAddressed");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillingoBillingAddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BillingoBillingAddressId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BillingoClients");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BlacklistedIP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIPBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedIPs");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BaseValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ValidatorHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ValidatorSalt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientIdentities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7eeb5534-1479-4228-a68b-78201170827d"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(3068),
                            ExpirationDate = new DateTime(2021, 2, 15, 22, 31, 12, 746, DateTimeKind.Local).AddTicks(4310),
                            IsActive = true,
                            UserId = new Guid("5de99496-dbbd-4ce5-9445-6d453b46d145"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        },
                        new
                        {
                            Id = new Guid("d6032798-1573-42c1-baf3-bfa1730d6818"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(5277),
                            ExpirationDate = new DateTime(2021, 2, 15, 22, 31, 12, 746, DateTimeKind.Local).AddTicks(5306),
                            IsActive = true,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        },
                        new
                        {
                            Id = new Guid("9e98f1e8-c93a-4079-bf12-6ca1aa8cdd34"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(5327),
                            ExpirationDate = new DateTime(2021, 2, 15, 22, 31, 12, 746, DateTimeKind.Local).AddTicks(5330),
                            IsActive = true,
                            UserId = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("KreditPurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("KreditPurchaseId");

                    b.ToTable("EDSMSPurchases");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailToVerify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FailDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditAmount")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FailedTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsServerRunning")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ServerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("GameServers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b29e9af-820d-45b2-9c8d-25d103377b6a"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 741, DateTimeKind.Local).AddTicks(3457),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "GTA"
                        },
                        new
                        {
                            Id = new Guid("7fc82764-def8-410c-a2bd-db92b3e9facf"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 744, DateTimeKind.Local).AddTicks(2595),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Survival"
                        },
                        new
                        {
                            Id = new Guid("40ef2b11-6295-448d-a853-737dcbf55af5"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 744, DateTimeKind.Local).AddTicks(2642),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Skyblock"
                        },
                        new
                        {
                            Id = new Guid("0b3db5a1-41cb-4a79-a826-d0342a41cfd5"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 744, DateTimeKind.Local).AddTicks(2649),
                            IsActive = true,
                            IsServerRunning = false,
                            ServerName = "RPG"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.JatekfizetesRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CallDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CallerUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActivationSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("CallerUserId");

                    b.ToTable("JatekfizetesRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditGift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditGiftAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("KreditGifts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KreditPurchases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28aaee62-f2fa-43d2-8a18-fac8e66cc8e9"),
                            CreationDate = new DateTime(2020, 10, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8711),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("65cfaa80-c075-4acd-a9c5-44b623a30470"),
                            CreationDate = new DateTime(2020, 10, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8808),
                            CurrencyValue = 5000,
                            IsActive = true,
                            KreditValue = 2500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("9bdf8b75-6d8b-4d35-92b4-e61666758087"),
                            CreationDate = new DateTime(2020, 11, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8823),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("eb6ed58d-c12b-4d92-ab23-c25c1c6d2ab7"),
                            CreationDate = new DateTime(2020, 11, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8831),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("d5780007-a337-445b-bc51-be0e02509914"),
                            CreationDate = new DateTime(2020, 12, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8839),
                            CurrencyValue = 6000,
                            IsActive = true,
                            KreditValue = 3000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("b81abd95-6d86-47ca-a541-99c400623262"),
                            CreationDate = new DateTime(2021, 1, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8847),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("60dcb2e1-f4b7-49f3-b497-53d1aa1628b5"),
                            CreationDate = new DateTime(2020, 10, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8855),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("ae3e0752-a236-4a73-a520-c82145dcb51e"),
                            CreationDate = new DateTime(2020, 10, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8863),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("4ef5d7ec-3b7e-42b5-8f4d-66fd9f1b81ac"),
                            CreationDate = new DateTime(2020, 11, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8870),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 2032,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("fcb055e7-87df-4007-bac0-87198304e22c"),
                            CreationDate = new DateTime(2020, 11, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8877),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("88224dce-0f91-461a-a56b-d489691d28eb"),
                            CreationDate = new DateTime(2020, 11, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8887),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("9aa23d46-8ca2-4304-b6cf-040f917c775d"),
                            CreationDate = new DateTime(2020, 12, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8895),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("211f8c0c-5ba2-4eef-91b2-5521e8090ea0"),
                            CreationDate = new DateTime(2020, 12, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8902),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("13d7c203-b6f3-4817-a395-702797bf8646"),
                            CreationDate = new DateTime(2021, 1, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8910),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("40763ab5-f691-4425-b245-eb6ed6a1c547"),
                            CreationDate = new DateTime(2021, 1, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8918),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("468cdf61-5221-46a2-92a0-1dff677581b7"),
                            CreationDate = new DateTime(2020, 10, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8925),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("1ffabc7e-9530-43e7-9af4-a216f5995ae3"),
                            CreationDate = new DateTime(2020, 11, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8933),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("0f1a79e5-3daa-4e8f-bf74-6ff8158225d2"),
                            CreationDate = new DateTime(2020, 11, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8940),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("2de2145e-0e7e-47dc-a063-9af4bdb95131"),
                            CreationDate = new DateTime(2020, 12, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8949),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("9b255ddd-5beb-454e-8ea4-9e2b9c68f300"),
                            CreationDate = new DateTime(2020, 12, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8957),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("efce2569-13a6-4f1f-9e13-fc07a5893780"),
                            CreationDate = new DateTime(2020, 12, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8964),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("9bee088b-6a0f-4bc8-a714-1ce9474e6669"),
                            CreationDate = new DateTime(2020, 12, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8972),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("04793bc4-3802-4254-bccd-38a41083fc43"),
                            CreationDate = new DateTime(2021, 1, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8979),
                            CurrencyValue = 4000,
                            IsActive = true,
                            KreditValue = 2000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("29ca66a5-114b-421a-95e7-0e5e66146233"),
                            CreationDate = new DateTime(2021, 1, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(8987),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MassKreditActivationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MassKreditActivationCodeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MassKreditActivationCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("MassKreditUserActivations");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormattedNews")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Preview")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PublisherUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PublisherUserId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95f1c3e5-88ca-473e-a032-85e96d58b887"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 26, 52, 747, DateTimeKind.Local).AddTicks(5852),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #1"
                        },
                        new
                        {
                            Id = new Guid("695c549e-33fe-4681-9ac3-1f96a1e3ebea"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 27, 42, 747, DateTimeKind.Local).AddTicks(6390),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #2"
                        },
                        new
                        {
                            Id = new Guid("46debc89-7360-4b78-b43f-114763c1b73b"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 28, 32, 747, DateTimeKind.Local).AddTicks(6405),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #3"
                        },
                        new
                        {
                            Id = new Guid("f34bde09-46fa-4934-bef2-6b99eb6e437d"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 29, 22, 747, DateTimeKind.Local).AddTicks(6412),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #4"
                        },
                        new
                        {
                            Id = new Guid("98c01085-883c-44d7-b5bd-13204b717079"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(6419),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #5"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OnlinePlayerCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.ToTable("OnlinePlayerStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Code")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f824b540-66fb-495d-960e-a3078cb06574"),
                            Code = new Guid("ac610d79-2109-421a-806e-0fea9c5ebef6"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(2550),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("083d5b40-b214-4ed3-858e-eae87e491dc0"),
                            Code = new Guid("4813e356-c057-42d8-8ae4-c61683c69074"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(3515),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalIPNMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressState")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressZip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Charset")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HandlingAmount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("McCurrency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("McFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("McGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NotifyVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PaymentFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProtectionEligibility")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResidenceCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Shipping")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TestIpn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TxnId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VerifySign")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PayPalIPNMessages");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequestProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RequesterUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterUserId");

                    b.ToTable("PayPalTransactionRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameActivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameDeactivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OneTimeCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermanentPrice")
                        .HasColumnType("int");

                    b.Property<int>("PricePerMonth")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e0336b6-3914-480c-9256-69a06a517214"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(7477),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "VIP rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 2000,
                            PricePerMonth = 1000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("2cd160a5-fa98-4206-84cf-e3921b21b4b2"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(1752),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Bajnok rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 6000,
                            PricePerMonth = 3000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("6d8ba587-c2f3-40dc-9ead-45b4b4701e50"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(1849),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Elit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 10000,
                            PricePerMonth = 5000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("0ed39aa6-cf39-4621-b49a-20d2564d055a"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(1855),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "SzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 14000,
                            PricePerMonth = 8000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("4f2736b4-50b6-4ed4-a670-f103257d4940"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(1861),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "HiperSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 16000,
                            PricePerMonth = 10000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("7612b1ba-2d25-43ca-a834-cdfc2cd4f296"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 747, DateTimeKind.Local).AddTicks(1866),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "ExtraSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 20000,
                            PricePerMonth = 16000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0"),
                            CategoryName = "Rangok",
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(5973),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 1
                        },
                        new
                        {
                            Id = new Guid("5d32fedf-28f9-4bc9-9899-4bacbbe9ea28"),
                            CategoryName = "Egyéb",
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(6848),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActivationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExpirationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PurchasedProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.HasIndex("PurchasedProductId");

                    b.ToTable("PurchaseStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOneTimeCommandRan")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOverwrittenByOtherRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditSpentOn")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ValidityPeriodInMonths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasedProducts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 745, DateTimeKind.Local).AddTicks(5444),
                            IsActive = true,
                            Name = "User",
                            PermissionLevel = 1
                        },
                        new
                        {
                            Id = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 745, DateTimeKind.Local).AddTicks(6925),
                            IsActive = true,
                            Name = "Admin",
                            PermissionLevel = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HyCoin")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAuthenticationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastAuthenticationIp")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5de99496-dbbd-4ce5-9445-6d453b46d145"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 745, DateTimeKind.Local).AddTicks(7951),
                            Currency = 1000000,
                            Email = "martinmarkus0@gmail.com",
                            HyCoin = 10000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 15, 22, 30, 12, 745, DateTimeKind.Local).AddTicks(9623),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(481),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic"
                        },
                        new
                        {
                            Id = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(2273),
                            Currency = 50000,
                            Email = "birdemic2@gmail.com",
                            HyCoin = 4000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(2315),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(2329),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic2"
                        },
                        new
                        {
                            Id = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698"),
                            CreationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(2371),
                            Currency = 40000,
                            Email = "hatoska@gmail.com",
                            HyCoin = 3000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(2376),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 15, 22, 30, 12, 746, DateTimeKind.Local).AddTicks(2378),
                            RoleId = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            UserName = "hatoska"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransfer", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("BankTransfers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransferBillingAddress", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BankTransfer", "BankTransfer")
                        .WithOne("BankTransferBillingAddress")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BankTransferBillingAddress", "BankTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", "BarionTransaction")
                        .WithOne("BarionBillingAddress")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", "BarionTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("BarionTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoClient", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingoBillingAddress", "BillingoBillingAddress")
                        .WithOne("BillingoClient")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BillingoClient", "BillingoBillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithOne("BillingoClient")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BillingoClient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", "KreditPurchase")
                        .WithMany("EDSMSPurchases")
                        .HasForeignKey("KreditPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("FailedBillingTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.JatekfizetesRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "CallerUser")
                        .WithMany("JatekfizetesRequests")
                        .HasForeignKey("CallerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditGift", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "ReceiverUser")
                        .WithMany("ReceivedKreditGifts")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "SenderUser")
                        .WithMany("SentKreditGifts")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", "MassKreditActivationCode")
                        .WithMany("MassKreditUserActivations")
                        .HasForeignKey("MassKreditActivationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "PublisherUser")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("OnlinePlayerStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("PasswordResetCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", "PurchasedProduct")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("PurchasedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Product", "Product")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.RefreshToken", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
