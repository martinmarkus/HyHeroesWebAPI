// <auto-generated />
using System;
using HyHeroesWebAPI.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HyHeroesWebAPI.Presentation.Migrations
{
    [DbContext(typeof(HyHeroesDbContext))]
    [Migration("20201227200703_ProductCategory2")]
    partial class ProductCategory2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ActualValueOfOneKredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("ActualValueOfOneKredit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6f933c7-a11a-4aa3-857b-088aceb14d13"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 777, DateTimeKind.Local).AddTicks(9993),
                            IsActive = true,
                            Value = 2m
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAdoszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAzonosito")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoMegjegyzes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoSendEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelefonszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BillingTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGeneratedByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("KreditPurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("SenderPhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("KreditPurchaseId");

                    b.ToTable("EDSMSActivationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GrossPrice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsTest")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("JatekFizetesId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Prefix")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverPhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("EDSMSPurchases");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailToVerify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillingTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FailDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("BillingTransactionId");

                    b.ToTable("FailedTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsServerRunning")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ServerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("GameServers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f810b229-3160-4c74-a173-c73f96728239"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 775, DateTimeKind.Local).AddTicks(3317),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "GTA"
                        },
                        new
                        {
                            Id = new Guid("cf5ff68d-08fe-44bc-9f84-134205f36c13"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 777, DateTimeKind.Local).AddTicks(1975),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Survival"
                        },
                        new
                        {
                            Id = new Guid("22af5358-e9eb-433e-a02f-1b8207efdadc"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 777, DateTimeKind.Local).AddTicks(2014),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Skyblock"
                        },
                        new
                        {
                            Id = new Guid("0f9909a4-75f2-412d-bc21-0839aaa29e95"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 777, DateTimeKind.Local).AddTicks(2020),
                            IsActive = true,
                            IsServerRunning = false,
                            ServerName = "RPG"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KreditPurchases");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MassKreditActivationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MassKreditActivationCodeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MassKreditActivationCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("MassKreditUserActivations");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormattedNews")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Preview")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PublisherUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PublisherUserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Code")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalIPNMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressState")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressZip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Charset")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HandlingAmount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("McCurrency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("McFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("McGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NotifyVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PaymentFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProtectionEligibility")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResidenceCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Shipping")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TestIpn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TxnId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VerifySign")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PayPalIPNMessages");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequestProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RequesterUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterUserId");

                    b.ToTable("PayPalTransactionRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameActivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameDeactivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OneTimeCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermanentPrice")
                        .HasColumnType("int");

                    b.Property<int>("PricePerMonth")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a2db96e-f5a0-4912-a389-47a9af35b902"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(5563),
                            Description = "test description",
                            ImageUrl = "test url",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "VIP rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 2000,
                            PricePerMonth = 1000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("53d3761b-2ae9-407f-be84-b42848c2ec98"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(7430),
                            Description = "test description",
                            ImageUrl = "test url",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Bajnok rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 6000,
                            PricePerMonth = 3000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("e8b3692c-597c-42ae-801b-12c823fca6b6"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(7500),
                            Description = "test description",
                            ImageUrl = "test url",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Elit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 10000,
                            PricePerMonth = 5000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("73cbb62d-f635-44ff-a66c-cd9e100736e8"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(7512),
                            Description = "test description",
                            ImageUrl = "test url",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "SzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 14000,
                            PricePerMonth = 8000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("e325f360-5fcc-42ee-9134-7df1ebbd0693"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(7517),
                            Description = "test description",
                            ImageUrl = "test url",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "HiperSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 16000,
                            PricePerMonth = 10000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("4153d42e-9dea-4ba3-91ae-50864ed70f8d"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(7522),
                            Description = "test description",
                            ImageUrl = "test url",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "ExtraSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 20000,
                            PricePerMonth = 16000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0"),
                            CategoryName = "Rangok",
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(4746),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 1
                        },
                        new
                        {
                            Id = new Guid("5d32fedf-28f9-4bc9-9899-4bacbbe9ea28"),
                            CategoryName = "Other",
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(5171),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActivationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExpirationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PurchasedProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.HasIndex("PurchasedProductId");

                    b.ToTable("PurchaseStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOverwrittenByOtherRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditSpentOn")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ValidityPeriodInMonths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasedProducts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(809),
                            IsActive = true,
                            Name = "User",
                            PermissionLevel = 1
                        },
                        new
                        {
                            Id = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(1676),
                            IsActive = true,
                            Name = "Admin",
                            PermissionLevel = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HyCoin")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAuthenticationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastAuthenticationIp")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("797a8443-2193-4900-8680-cdc927375c3e"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(2197),
                            Currency = 1000000,
                            Email = "martinmarkus0@gmail.com",
                            HyCoin = 10000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(2974),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(3407),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic"
                        },
                        new
                        {
                            Id = new Guid("6819d008-dd5b-4bfd-8fea-61a76a4fc8b2"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(4263),
                            Currency = 50000,
                            Email = "birdemic2@gmail.com",
                            HyCoin = 4000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(4304),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(4321),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic2"
                        },
                        new
                        {
                            Id = new Guid("3c571497-d775-4ed2-a259-a2b5792c5ac9"),
                            CreationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(4353),
                            Currency = 40000,
                            Email = "hatoska@gmail.com",
                            HyCoin = 3000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(4356),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2020, 12, 27, 21, 7, 2, 778, DateTimeKind.Local).AddTicks(4359),
                            RoleId = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            UserName = "hatoska"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSActivationCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", "KreditPurchase")
                        .WithMany()
                        .HasForeignKey("KreditPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", "BillingTransaction")
                        .WithMany()
                        .HasForeignKey("BillingTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", "MassKreditActivationCode")
                        .WithMany()
                        .HasForeignKey("MassKreditActivationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "PublisherUser")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", "PurchasedProduct")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("PurchasedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
