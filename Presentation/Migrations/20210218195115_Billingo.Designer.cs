// <auto-generated />
using System;
using HyHeroesWebAPI.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HyHeroesWebAPI.Presentation.Migrations
{
    [DbContext(typeof(HyHeroesDbContext))]
    [Migration("20210218195115_Billingo")]
    partial class Billingo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BillingName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransferCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankTransfers");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransferBillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BankTransferId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Region")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BankTransferId")
                        .IsUnique();

                    b.ToTable("BankTransferBillingAddresses");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarionTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Region")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BarionTransactionId")
                        .IsUnique();

                    b.ToTable("BarionBillingAddresses");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BillingName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GatewayURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("KreditAmount")
                        .HasColumnType("double");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BarionTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAdoszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAzonosito")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoMegjegyzes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoOrszagKod")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoSendEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelefonszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BillingTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AccountNumberIban")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BillingoBankAccountId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NeeedQr")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Swift")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BillingoBankAccounts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoBillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("BillingoBillingAddresses");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("BillingoBankAccountId")
                        .HasColumnType("char(36)");

                    b.Property<long>("BillingoDocumentId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("BillingoDocumentSettingsId")
                        .HasColumnType("char(36)");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ConversionRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DueDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Electronic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FulfillmentDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VendorId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BillingoBankAccountId");

                    b.HasIndex("BillingoDocumentSettingsId")
                        .IsUnique();

                    b.ToTable("BillingoDocuments");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoDocumentSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("MediatedService")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OnlinePayment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Round")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<bool>("WithoutFinancialFulfillment")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("BillingoDocumentSettings");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("BillingoBillingAddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BillingoPartnerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GeneralLedgerNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Iban")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PartnerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Swift")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TaxType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Taxcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BillingoBillingAddressId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("BillingoPartners");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BillingoDocumentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BillingoProductId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Entitlement")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GeneralLedgerNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GeneralLedgerTaxcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<string>("UnitPriceType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Vat")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BillingoDocumentId");

                    b.ToTable("BillingoProducts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BlacklistedIP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIPBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedIPs");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BaseValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ValidatorHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ValidatorSalt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientIdentities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("578de252-9baf-4174-91da-068f47ceb08e"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(1294),
                            ExpirationDate = new DateTime(2021, 2, 18, 20, 52, 15, 450, DateTimeKind.Local).AddTicks(2587),
                            IsActive = true,
                            UserId = new Guid("5de99496-dbbd-4ce5-9445-6d453b46d145"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        },
                        new
                        {
                            Id = new Guid("726cf07d-176f-4af6-9620-27f15dbf60b8"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(3596),
                            ExpirationDate = new DateTime(2021, 2, 18, 20, 52, 15, 450, DateTimeKind.Local).AddTicks(3627),
                            IsActive = true,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        },
                        new
                        {
                            Id = new Guid("7b6ce5db-54d3-40fe-8548-b1e4cc64c48b"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(3652),
                            ExpirationDate = new DateTime(2021, 2, 18, 20, 52, 15, 450, DateTimeKind.Local).AddTicks(3655),
                            IsActive = true,
                            UserId = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("KreditPurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("KreditPurchaseId");

                    b.ToTable("EDSMSPurchases");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailToVerify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FailDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditAmount")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FailedTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsServerRunning")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ServerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("GameServers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("475987ce-588e-41d7-aa5f-a48ab8aa5a28"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 445, DateTimeKind.Local).AddTicks(2383),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "GTA"
                        },
                        new
                        {
                            Id = new Guid("24eac2aa-20b2-44e6-86d0-a42e923795c9"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 448, DateTimeKind.Local).AddTicks(1111),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Survival"
                        },
                        new
                        {
                            Id = new Guid("8ecc9e64-1a37-45d5-a9a7-6bf3f498a1da"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 448, DateTimeKind.Local).AddTicks(1188),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Skyblock"
                        },
                        new
                        {
                            Id = new Guid("7cde7348-7db3-409d-ab67-71c211b866aa"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 448, DateTimeKind.Local).AddTicks(1194),
                            IsActive = true,
                            IsServerRunning = false,
                            ServerName = "RPG"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.JatekfizetesRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CallDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CallerUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActivationSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("CallerUserId");

                    b.ToTable("JatekfizetesRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditGift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditGiftAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("KreditGifts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KreditPurchases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71516a71-30ce-45ec-9f9e-8894a9387426"),
                            CreationDate = new DateTime(2020, 10, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7712),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("4766590d-adea-4e84-8d1e-5e2395bc5b42"),
                            CreationDate = new DateTime(2020, 10, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7826),
                            CurrencyValue = 5000,
                            IsActive = true,
                            KreditValue = 2500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("9508de8e-224f-4d0c-b197-e982887aca8d"),
                            CreationDate = new DateTime(2020, 11, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7836),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("41eab1f5-6081-43c5-9e49-e5c91d0206a6"),
                            CreationDate = new DateTime(2020, 11, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7845),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("0d70310d-7c76-4f4e-a4d3-9a9675a3529e"),
                            CreationDate = new DateTime(2020, 12, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7856),
                            CurrencyValue = 6000,
                            IsActive = true,
                            KreditValue = 3000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("f5536611-b31c-4b9f-9b95-88fa2fcc533b"),
                            CreationDate = new DateTime(2021, 1, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7865),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("63a22e5e-01d7-4eb9-89aa-7641e3227d2e"),
                            CreationDate = new DateTime(2020, 10, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7873),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("7243df8f-d014-408b-bf0a-bd90d75a31c7"),
                            CreationDate = new DateTime(2020, 10, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7880),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("7741ae14-e4fd-4ceb-8853-6c0796160b55"),
                            CreationDate = new DateTime(2020, 11, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7888),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 2032,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("79fdaa8d-4fde-4ab0-889e-169baba49259"),
                            CreationDate = new DateTime(2020, 11, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7899),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("f12084fb-452a-453f-95be-807f4652b00f"),
                            CreationDate = new DateTime(2020, 11, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7906),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("ee19556d-ad0e-407c-a7b9-e7de689131b0"),
                            CreationDate = new DateTime(2020, 12, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7915),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("456ab38e-7bb7-4a9b-ae0c-ef5bb26133d0"),
                            CreationDate = new DateTime(2020, 12, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7923),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("2e9884c2-9229-4137-bf97-d9a5bef51820"),
                            CreationDate = new DateTime(2021, 1, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7931),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("8c46e495-024b-4a80-a326-ad4060e075dc"),
                            CreationDate = new DateTime(2021, 1, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7939),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("6d1a8657-1924-44fc-bf04-5536531f4439"),
                            CreationDate = new DateTime(2020, 10, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7991),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("5bd9f8ed-ac93-4a4e-b447-7097c17fc29f"),
                            CreationDate = new DateTime(2020, 11, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(7999),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("6be5c672-2147-44e7-8d1e-6efb2d22d578"),
                            CreationDate = new DateTime(2020, 11, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(8010),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("8bfd3fd1-6262-41d5-98e6-25e70360323c"),
                            CreationDate = new DateTime(2020, 12, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(8017),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("97fd0928-44bf-4936-bb5d-f30c24693eea"),
                            CreationDate = new DateTime(2020, 12, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(8025),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("0a0b0538-ee22-4754-b0f6-af4581f4b15c"),
                            CreationDate = new DateTime(2020, 12, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(8033),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("89a35c45-fb4b-4914-a461-57ca9d3985fc"),
                            CreationDate = new DateTime(2020, 12, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(8042),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("add95d88-cee5-48de-baf7-25ee8af94d88"),
                            CreationDate = new DateTime(2021, 1, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(8050),
                            CurrencyValue = 4000,
                            IsActive = true,
                            KreditValue = 2000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("d7d07b4a-943c-4732-8df8-a0be87e14626"),
                            CreationDate = new DateTime(2021, 1, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(8058),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MassKreditActivationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MassKreditActivationCodeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MassKreditActivationCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("MassKreditUserActivations");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormattedNews")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Preview")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PublisherUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PublisherUserId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c96ed20e-9ec8-4c3c-b594-05862cb89319"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 47, 55, 451, DateTimeKind.Local).AddTicks(4719),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #1"
                        },
                        new
                        {
                            Id = new Guid("a295b1c6-50c6-40da-ae22-8b93bddaa218"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 48, 45, 451, DateTimeKind.Local).AddTicks(5288),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #2"
                        },
                        new
                        {
                            Id = new Guid("6e137d89-b9d0-46fe-b18e-d0212113e510"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 49, 35, 451, DateTimeKind.Local).AddTicks(5304),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #3"
                        },
                        new
                        {
                            Id = new Guid("dc1bc883-05a5-4d5e-b0fa-580dcf48b113"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 50, 25, 451, DateTimeKind.Local).AddTicks(5312),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #4"
                        },
                        new
                        {
                            Id = new Guid("a56e6b4c-9c8e-48cc-bcb6-c9a15cc774c5"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(5319),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #5"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OnlinePlayerCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.ToTable("OnlinePlayerStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Code")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d5e305b-eab7-4c93-b8e6-fa67a07fe303"),
                            Code = new Guid("bf50d6a3-c950-47e6-8f09-0043e636042a"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(1140),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("f7557030-9a24-4505-8898-e7d52a86abca"),
                            Code = new Guid("3c5e1bc0-dd6a-4c13-b1b4-192d8caaef9a"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(2151),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalIPNMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressState")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressZip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Charset")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HandlingAmount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("McCurrency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("McFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("McGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NotifyVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PaymentFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProtectionEligibility")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResidenceCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Shipping")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TestIpn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TxnId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VerifySign")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PayPalIPNMessages");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequestProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RequesterUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterUserId");

                    b.ToTable("PayPalTransactionRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameActivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameDeactivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OneTimeCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermanentPrice")
                        .HasColumnType("int");

                    b.Property<int>("PricePerMonth")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86626ed2-9fb8-4255-bcac-ed154cbe3952"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(5942),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "VIP rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 2000,
                            PricePerMonth = 1000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("1bb5d2a9-da3b-4c7c-be95-76fbc461addd"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(239),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Bajnok rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 6000,
                            PricePerMonth = 3000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("6ec4a789-1c15-4186-836f-2f412821bb7b"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(340),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Elit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 10000,
                            PricePerMonth = 5000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("fe95ac24-79ed-4dc0-ba51-deaac384b5d8"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(349),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "SzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 14000,
                            PricePerMonth = 8000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("0a8fd3a7-8ace-49d8-9185-d5c53da6a98c"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(355),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "HiperSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 16000,
                            PricePerMonth = 10000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("f47a4aa3-c2e1-4075-94fd-d12a69753658"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 451, DateTimeKind.Local).AddTicks(361),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "ExtraSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 20000,
                            PricePerMonth = 16000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0"),
                            CategoryName = "Rangok",
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(4312),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 1
                        },
                        new
                        {
                            Id = new Guid("5d32fedf-28f9-4bc9-9899-4bacbbe9ea28"),
                            CategoryName = "Egyéb",
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(5264),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActivationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExpirationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PurchasedProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.HasIndex("PurchasedProductId");

                    b.ToTable("PurchaseStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOneTimeCommandRan")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOverwrittenByOtherRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditSpentOn")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ValidityPeriodInMonths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasedProducts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 449, DateTimeKind.Local).AddTicks(3105),
                            IsActive = true,
                            Name = "User",
                            PermissionLevel = 1
                        },
                        new
                        {
                            Id = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 449, DateTimeKind.Local).AddTicks(4842),
                            IsActive = true,
                            Name = "Admin",
                            PermissionLevel = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HyCoin")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAuthenticationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastAuthenticationIp")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5de99496-dbbd-4ce5-9445-6d453b46d145"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 449, DateTimeKind.Local).AddTicks(5946),
                            Currency = 1000000,
                            Email = "martinmarkus0@gmail.com",
                            HyCoin = 10000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 18, 20, 51, 15, 449, DateTimeKind.Local).AddTicks(7706),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 18, 20, 51, 15, 449, DateTimeKind.Local).AddTicks(8609),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic"
                        },
                        new
                        {
                            Id = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(431),
                            Currency = 50000,
                            Email = "birdemic2@gmail.com",
                            HyCoin = 4000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(475),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(491),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic2"
                        },
                        new
                        {
                            Id = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698"),
                            CreationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(536),
                            Currency = 40000,
                            Email = "hatoska@gmail.com",
                            HyCoin = 3000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(541),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 18, 20, 51, 15, 450, DateTimeKind.Local).AddTicks(543),
                            RoleId = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            UserName = "hatoska"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransfer", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("BankTransfers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BankTransferBillingAddress", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BankTransfer", "BankTransfer")
                        .WithOne("BankTransferBillingAddress")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BankTransferBillingAddress", "BankTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", "BarionTransaction")
                        .WithOne("BarionBillingAddress")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", "BarionTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("BarionTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoDocument", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingoBankAccount", "BillingoBankAccount")
                        .WithMany()
                        .HasForeignKey("BillingoBankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingoDocumentSettings", "BillingoDocumentSettings")
                        .WithOne("BillingoDocument")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BillingoDocument", "BillingoDocumentSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoPartner", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingoBillingAddress", "BillingoBillingAddress")
                        .WithOne("BillingoPartner")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BillingoPartner", "BillingoBillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingoProduct", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingoDocument", null)
                        .WithMany("BillingoProducts")
                        .HasForeignKey("BillingoDocumentId");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", "KreditPurchase")
                        .WithMany("EDSMSPurchases")
                        .HasForeignKey("KreditPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("FailedBillingTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.JatekfizetesRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "CallerUser")
                        .WithMany("JatekfizetesRequests")
                        .HasForeignKey("CallerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditGift", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "ReceiverUser")
                        .WithMany("ReceivedKreditGifts")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "SenderUser")
                        .WithMany("SentKreditGifts")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", "MassKreditActivationCode")
                        .WithMany("MassKreditUserActivations")
                        .HasForeignKey("MassKreditActivationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "PublisherUser")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Notification", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("OnlinePlayerStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("PasswordResetCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", "PurchasedProduct")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("PurchasedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Product", "Product")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.RefreshToken", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
