// <auto-generated />
using System;
using HyHeroesWebAPI.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HyHeroesWebAPI.Presentation.Migrations
{
    [DbContext(typeof(HyHeroesDbContext))]
    [Migration("20210205185541_BarionTransactoinUpdate")]
    partial class BarionTransactoinUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ActualValueOfOneKredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("ActualValueOfOneKredit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61013486-cb33-4b5b-b490-a5cee66f0aa4"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 263, DateTimeKind.Local).AddTicks(5949),
                            IsActive = true,
                            Value = 2m
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarionTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Region")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BarionTransactionId")
                        .IsUnique();

                    b.ToTable("BarionBillingAddresses");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BillingName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GatewayURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("KreditAmount")
                        .HasColumnType("double");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BarionTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAdoszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoAzonosito")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoMegjegyzes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiCim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiIrsz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiNev")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoPostazasiTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoSendEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelefonszam")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VevoTelepules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BillingTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BlacklistedIP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIPBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedIPs");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BaseValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ValidatorHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ValidatorSalt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientIdentities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d3d9fc-7bd2-47ea-89cf-aca4e51e8899"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(4940),
                            ExpirationDate = new DateTime(2021, 2, 5, 20, 55, 40, 264, DateTimeKind.Local).AddTicks(6236),
                            IsActive = true,
                            UserId = new Guid("5de99496-dbbd-4ce5-9445-6d453b46d145"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        },
                        new
                        {
                            Id = new Guid("10ccf853-17b3-4e44-9589-8064b92379dc"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(7253),
                            ExpirationDate = new DateTime(2021, 2, 5, 20, 55, 40, 264, DateTimeKind.Local).AddTicks(7302),
                            IsActive = true,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        },
                        new
                        {
                            Id = new Guid("ba2ffd59-e4b8-4fdb-97e9-89074f92d358"),
                            BaseValue = "bQY0QnNkr4ch0cAR1sBM6uZr+IFWzt4N",
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(7326),
                            ExpirationDate = new DateTime(2021, 2, 5, 20, 55, 40, 264, DateTimeKind.Local).AddTicks(7329),
                            IsActive = true,
                            UserId = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698"),
                            ValidatorHash = "whQv8pQfvmULOXU3szzZo3kgPcGDa5vL",
                            ValidatorSalt = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("KreditPurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("KreditPurchaseId");

                    b.ToTable("EDSMSPurchases");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailToVerify")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BillingTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FailDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("BillingTransactionId");

                    b.ToTable("FailedTransactions");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsServerRunning")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ServerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("GameServers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d02c443e-c224-4f0a-a37c-d4b27e355d72"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 259, DateTimeKind.Local).AddTicks(3484),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "GTA"
                        },
                        new
                        {
                            Id = new Guid("39c684a7-271d-47fb-a246-36d6b4862c46"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 262, DateTimeKind.Local).AddTicks(3982),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Survival"
                        },
                        new
                        {
                            Id = new Guid("0d0de8ff-77cb-4cb7-b8b6-3c3ef0b4e41d"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 262, DateTimeKind.Local).AddTicks(4042),
                            IsActive = true,
                            IsServerRunning = true,
                            ServerName = "Skyblock"
                        },
                        new
                        {
                            Id = new Guid("c92ab661-b5d3-41d2-9629-36ac8aad7aad"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 262, DateTimeKind.Local).AddTicks(4051),
                            IsActive = true,
                            IsServerRunning = false,
                            ServerName = "RPG"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.JatekfizetesRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CallDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CallerUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActivationSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("CallerUserId");

                    b.ToTable("JatekfizetesRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditGift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditGiftAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("KreditGifts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KreditPurchases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f211262a-5c48-4a82-8047-9963fe0555ab"),
                            CreationDate = new DateTime(2020, 10, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1565),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("5db3b576-2456-47a4-8a15-fbd2c4e940fe"),
                            CreationDate = new DateTime(2020, 10, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1694),
                            CurrencyValue = 5000,
                            IsActive = true,
                            KreditValue = 2500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("21b336bd-33cc-4ad9-b63a-835fbe132f4e"),
                            CreationDate = new DateTime(2020, 11, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1704),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("f9ad031d-18b8-4040-8f54-8ebb15a04562"),
                            CreationDate = new DateTime(2020, 11, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1803),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("16ea2f20-1478-47df-b5c9-948e3314b439"),
                            CreationDate = new DateTime(2020, 12, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1816),
                            CurrencyValue = 6000,
                            IsActive = true,
                            KreditValue = 3000,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("d46964c7-3c82-488f-be45-88f51128991a"),
                            CreationDate = new DateTime(2021, 1, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1824),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 1,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("9f17f1e3-7c37-4fe0-8bd8-cd2f0831a610"),
                            CreationDate = new DateTime(2020, 10, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1832),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("78478be5-cf8e-4911-8a5c-878cccf2d880"),
                            CreationDate = new DateTime(2020, 10, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1840),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("a745c24d-714f-462c-aacd-417e3861b0fd"),
                            CreationDate = new DateTime(2020, 11, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1848),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 2032,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("d80c3484-1e0d-4197-a8ba-be4062268ab2"),
                            CreationDate = new DateTime(2020, 11, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1856),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("cf17d060-9ab5-40fe-8ff1-9a42fd7bda52"),
                            CreationDate = new DateTime(2020, 11, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1864),
                            CurrencyValue = 330,
                            IsActive = true,
                            KreditValue = 330,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("074b72db-5fde-4d99-b4b2-83fa495fdb29"),
                            CreationDate = new DateTime(2020, 12, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1872),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("0da73db0-c5b9-4d46-a4f0-d71fa0ad65ed"),
                            CreationDate = new DateTime(2020, 12, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1882),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("f3bf6669-1003-4c54-8415-d50ea1a5e26c"),
                            CreationDate = new DateTime(2021, 1, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1890),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("d4fd6c29-da90-457a-b4a7-f7760fdf2772"),
                            CreationDate = new DateTime(2021, 1, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1899),
                            CurrencyValue = 500,
                            IsActive = true,
                            KreditValue = 508,
                            PaymentType = 0,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("8fa911a7-8eb5-4a8a-bdd2-be9e84a0a7fa"),
                            CreationDate = new DateTime(2020, 10, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1906),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("f9c6b6de-57c3-4903-9f71-19738d279302"),
                            CreationDate = new DateTime(2020, 11, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1914),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("28070fda-8fab-405e-8014-c377af254176"),
                            CreationDate = new DateTime(2020, 11, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1922),
                            CurrencyValue = 2000,
                            IsActive = true,
                            KreditValue = 1000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("c214739b-02ac-48e4-a88a-85774b560093"),
                            CreationDate = new DateTime(2020, 12, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1931),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("6adceb2d-939c-4d94-b973-127026529e5b"),
                            CreationDate = new DateTime(2020, 12, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1938),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("85d919de-dd18-464c-af8a-3b703a6f9364"),
                            CreationDate = new DateTime(2020, 12, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1948),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("7ced14e7-6bdc-497c-90b8-c458d9ea9d7a"),
                            CreationDate = new DateTime(2020, 12, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1956),
                            CurrencyValue = 1000,
                            IsActive = true,
                            KreditValue = 500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("b1848bd3-1f6f-4625-adea-446863e94beb"),
                            CreationDate = new DateTime(2021, 1, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1963),
                            CurrencyValue = 4000,
                            IsActive = true,
                            KreditValue = 2000,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("c5a6bb55-8167-46c1-b35b-785fe40dd2df"),
                            CreationDate = new DateTime(2021, 1, 5, 19, 55, 40, 266, DateTimeKind.Local).AddTicks(1971),
                            CurrencyValue = 3000,
                            IsActive = true,
                            KreditValue = 1500,
                            PaymentType = 2,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MassKreditActivationCodes");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MassKreditActivationCodeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MassKreditActivationCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("MassKreditUserActivations");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormattedNews")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Preview")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PublisherUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PublisherUserId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ba970a0-0f64-49c1-9055-344d174e4e5d"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 52, 20, 265, DateTimeKind.Local).AddTicks(8472),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #1"
                        },
                        new
                        {
                            Id = new Guid("0fcd5570-2a02-4c3e-88ca-668aeb6d5400"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 53, 10, 265, DateTimeKind.Local).AddTicks(9063),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #2"
                        },
                        new
                        {
                            Id = new Guid("86cff2e0-bbee-43f6-bc19-44667d2a8194"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 54, 0, 265, DateTimeKind.Local).AddTicks(9079),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #3"
                        },
                        new
                        {
                            Id = new Guid("c67111d5-1f17-43a4-8ea9-00d63cdabc5a"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 54, 50, 265, DateTimeKind.Local).AddTicks(9087),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #4"
                        },
                        new
                        {
                            Id = new Guid("3c2aadbb-290f-4cca-9f50-0420b0d9d907"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(9095),
                            FormattedNews = "Ez itt a hír tartalma.",
                            IsActive = true,
                            Preview = "Ez a hír előnézeti szövege.",
                            PublisherUserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            Title = "Teszt Hír #5"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OnlinePlayerCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.ToTable("OnlinePlayerStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Code")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1962959b-5672-4cf7-a57e-618e68ca2134"),
                            Code = new Guid("d4312150-07a8-44a8-a57e-7825fdfecd0d"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(4985),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5")
                        },
                        new
                        {
                            Id = new Guid("aa11ea7f-8ea3-4ad5-aded-4c2709be0a4e"),
                            Code = new Guid("b0ceb749-abe6-420f-b972-c733c3b43cdd"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(6008),
                            IsActive = true,
                            IsUsed = false,
                            UserId = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalIPNMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressCountryCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressState")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressZip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Charset")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HandlingAmount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("McCurrency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("McFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("McGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NotifyVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PayerStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PaymentFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentGross")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProtectionEligibility")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResidenceCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Shipping")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TestIpn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TransactionSubject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TxnId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VerifySign")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PayPalIPNMessages");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequestProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RequesterUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterUserId");

                    b.ToTable("PayPalTransactionRequests");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameActivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InGameDeactivatorCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OneTimeCommand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermanentPrice")
                        .HasColumnType("int");

                    b.Property<int>("PricePerMonth")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dfb60717-f0f9-495f-8ccc-66a664e485ed"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(9594),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "VIP rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 2000,
                            PricePerMonth = 1000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("81457510-d0b2-4e44-bd4b-0dfe59da0683"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(4144),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Bajnok rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 6000,
                            PricePerMonth = 3000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("70460665-ca50-4bb4-99b2-14a4dbaa1b25"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(4243),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "Elit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 10000,
                            PricePerMonth = 5000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("77aa0cd4-113f-4b80-8d1f-b71724167dd1"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(4256),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "SzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 14000,
                            PricePerMonth = 8000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("5d4131ec-cf67-44cd-a1e2-2111d665c955"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(4262),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "HiperSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 16000,
                            PricePerMonth = 10000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        },
                        new
                        {
                            Id = new Guid("f2dd1718-f490-4e02-a2ab-ff43e85d8e94"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 265, DateTimeKind.Local).AddTicks(4267),
                            Description = "test description",
                            ImageUrl = "http://localhost:4200/assets/img/add-icon.png",
                            InGameActivatorCommand = "activate",
                            InGameDeactivatorCommand = "deactivate",
                            IsActive = true,
                            IsRank = true,
                            Name = "ExtraSzuperElit rang",
                            OneTimeCommand = "onetime command",
                            PermanentPrice = 20000,
                            PricePerMonth = 16000,
                            ProductCategoryId = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0")
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894cf24d-9bf2-4935-9b31-4d1614f1cee0"),
                            CategoryName = "Rangok",
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(8003),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 1
                        },
                        new
                        {
                            Id = new Guid("5d32fedf-28f9-4bc9-9899-4bacbbe9ea28"),
                            CategoryName = "Egyéb",
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(8914),
                            IsActive = true,
                            IsUsed = false,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameServerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActivationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExpirationVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PurchasedProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameServerId");

                    b.HasIndex("PurchasedProductId");

                    b.ToTable("PurchaseStates");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOneTimeCommandRan")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOverwrittenByOtherRank")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("KreditSpentOn")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ValidityPeriodInMonths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasedProducts");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 263, DateTimeKind.Local).AddTicks(7276),
                            IsActive = true,
                            Name = "User",
                            PermissionLevel = 1
                        },
                        new
                        {
                            Id = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 263, DateTimeKind.Local).AddTicks(8826),
                            IsActive = true,
                            Name = "Admin",
                            PermissionLevel = 2
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HyCoin")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAuthenticationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastAuthenticationIp")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5de99496-dbbd-4ce5-9445-6d453b46d145"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 263, DateTimeKind.Local).AddTicks(9621),
                            Currency = 1000000,
                            Email = "martinmarkus0@gmail.com",
                            HyCoin = 10000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(1362),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(2275),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic"
                        },
                        new
                        {
                            Id = new Guid("bf99a9b3-1d1b-4614-9ff7-90a17b1cd9f5"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(4093),
                            Currency = 50000,
                            Email = "birdemic2@gmail.com",
                            HyCoin = 4000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(4152),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(4169),
                            RoleId = new Guid("779126ee-2c1c-4eef-8eec-4ff6463e17aa"),
                            UserName = "birdemic2"
                        },
                        new
                        {
                            Id = new Guid("96bb6ed1-38e2-4bd7-b6d7-989ec78f5698"),
                            CreationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(4209),
                            Currency = 40000,
                            Email = "hatoska@gmail.com",
                            HyCoin = 3000,
                            IsActive = true,
                            IsBanned = false,
                            LastAuthenticationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(4215),
                            LastAuthenticationIp = "localhost",
                            PasswordHash = "IFch0cAbQ46uZ0Wr+QnNkrBMR1sYzt4N",
                            PasswordSalt = "6yuhyavedvvwufmjpln1cjuqrm6agpvh",
                            RegistrationDate = new DateTime(2021, 2, 5, 19, 55, 40, 264, DateTimeKind.Local).AddTicks(4218),
                            RoleId = new Guid("77dc6e7e-a188-4174-9752-8014cba152e8"),
                            UserName = "hatoska"
                        });
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", "BarionTransaction")
                        .WithOne("BarionBillingAddress")
                        .HasForeignKey("HyHeroesWebAPI.ApplicationCore.Entities.BarionBillingAddress", "BarionTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.BarionTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("BarionTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.ClientIdentity", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EDSMSPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", "KreditPurchase")
                        .WithMany("EDSMSPurchases")
                        .HasForeignKey("KreditPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.EmailVerificationCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.FailedBillingTransaction", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.BillingTransaction", "BillingTransaction")
                        .WithMany()
                        .HasForeignKey("BillingTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.JatekfizetesRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "CallerUser")
                        .WithMany("JatekfizetesRequests")
                        .HasForeignKey("CallerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditGift", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "ReceiverUser")
                        .WithMany("ReceivedKreditGifts")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "SenderUser")
                        .WithMany("SentKreditGifts")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.KreditPurchase", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditUserActivation", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.MassKreditActivationCode", "MassKreditActivationCode")
                        .WithMany("MassKreditUserActivations")
                        .HasForeignKey("MassKreditActivationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.News", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "PublisherUser")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.OnlinePlayerState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("OnlinePlayerStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PasswordResetCode", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany("PasswordResetCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PayPalTransactionRequest", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchaseState", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.GameServer", "GameServer")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", "PurchasedProduct")
                        .WithMany("PurchaseStates")
                        .HasForeignKey("PurchasedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.PurchasedProduct", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Product", "Product")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyHeroesWebAPI.ApplicationCore.Entities.User", b =>
                {
                    b.HasOne("HyHeroesWebAPI.ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
